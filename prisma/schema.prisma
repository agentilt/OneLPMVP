generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  name             String?
  firstName        String?
  lastName         String?
  password         String
  role             Role            @default(USER)
  emailVerified    DateTime?
  resetToken       String?
  resetTokenExpiry DateTime?
  mfaEnabled       Boolean         @default(false)
  lastLoginAt      DateTime?
  loginAttempts    Int             @default(0)
  lockedUntil      DateTime?
  clientId         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  AuditLog            AuditLog[]
  cryptoHoldings      CryptoHolding[]
  funds               Fund[]
  fundAccess          FundAccess[]
  directInvestments   DirectInvestment[]
  invitationsSent     Invitation[]
  passwordResets      PasswordReset[]
  mfaTokens           MFAToken[]
  mfaSettings         MFASettings?
  sessions            UserSession[]
  securityEvents      SecurityEvent[]
  client              Client?         @relation(fields: [clientId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([resetToken])
  @@index([mfaEnabled])
  @@index([lastLoginAt])
  @@index([lockedUntil])
  @@index([clientId])
}

model Invitation {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  tokenHash String?
  role      String    @default("USER")
  expiresAt DateTime
  usedAt    DateTime?
  used      Boolean   @default(false)
  invitedBy String
  clientId  String?
  createdAt DateTime  @default(now())
  creator   User      @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  client    Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)

  @@index([token])
  @@index([tokenHash])
  @@index([email])
  @@index([role])
  @@index([invitedBy])
  @@index([clientId])
}

model Client {
  id                String            @id @default(cuid())
  name              String
  email             String?
  phone             String?
  address           String?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  funds             Fund[]
  directInvestments DirectInvestment[]
  invitations       Invitation[]
  users             User[]

  @@index([name])
  @@index([email])
}

model Fund {
  id             String       @id @default(cuid())
  userId         String?
  clientId       String?
  name           String
  domicile       String
  vintage        Int
  manager        String
  managerEmail   String?
  managerPhone   String?
  managerWebsite String?
  commitment     Float
  paidIn         Float
  nav            Float
  irr            Float
  tvpi           Float
  dpi            Float
  lastReportDate DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  documents      Document[]
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  fundAccess     FundAccess[]
  navHistory     NavHistory[]

  @@index([name])
  @@index([userId])
  @@index([clientId])
}

model NavHistory {
  id        String   @id @default(cuid())
  fundId    String
  date      DateTime
  nav       Float
  createdAt DateTime @default(now())
  fund      Fund     @relation(fields: [fundId], references: [id], onDelete: Cascade)

  @@index([fundId, date])
}

model Document {
  id              String         @id @default(cuid())
  fundId          String
  type            DocumentType
  title           String
  uploadDate      DateTime
  dueDate         DateTime?
  callAmount      Float?
  paymentStatus   PaymentStatus?
  url             String
  parsedData      Json?
  investmentValue Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  fund            Fund           @relation(fields: [fundId], references: [id], onDelete: Cascade)

  @@index([fundId])
  @@index([type])
}

model FundAccess {
  id               String   @id @default(cuid())
  userId           String
  fundId           String
  relationshipType String? // "ADVISOR", "LP", "CO_INVESTOR", "INTERNAL_ADMIN"
  permissionLevel  String?  @default("READ_ONLY") // "READ_ONLY", "READ_WRITE", "ADMIN"
  notes            String?
  createdAt        DateTime @default(now())
  fund             Fund     @relation(fields: [fundId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, fundId])
  @@index([userId])
  @@index([fundId])
  @@index([relationshipType])
}

model DirectInvestment {
  id                String                    @id @default(cuid())
  userId            String?
  clientId          String?
  name              String                    // Startup/Company name
  industry          String?
  stage             String?                   // e.g., "Seed", "Series A", "Series B", etc.
  investmentDate    DateTime?
  investmentAmount  Float?
  
  // Aggregated fields - calculated from documents (latest values)
  // These are cached for performance and updated when documents are added/updated
  revenue           Float?                    // Latest revenue from documents
  arr               Float?                    // Latest ARR from documents
  mrr               Float?                    // Latest MRR from documents
  grossMargin       Float?                    // Latest gross margin from documents
  runRate           Float?                    // Latest run rate from documents
  burn              Float?                    // Latest monthly burn from documents
  runway            Float?                    // Latest runway from documents
  headcount         Int?                      // Latest headcount from documents
  cac               Float?                    // Latest CAC from documents
  ltv               Float?                    // Latest LTV from documents
  nrr               Float?                    // Latest NRR from documents
  cashBalance       Float?                    // Latest cash balance from documents
  
  // Aggregated executive summary - latest from documents
  period            String?                   // Latest period from documents
  periodDate        DateTime?                 // Latest period date from documents
  highlights        String?                   @db.Text // Latest highlights from documents
  lowlights         String?                   @db.Text // Latest lowlights from documents
  milestones        String?                   @db.Text // Latest milestones from documents
  recentRounds      String?                   @db.Text // Latest recent rounds from documents
  capTableChanges   String?                   @db.Text // Latest cap table changes from documents
  
  lastReportDate    DateTime?                 // Date of most recent document
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  
  documents         DirectInvestmentDocument[]
  user              User?                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client            Client?                   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([userId])
  @@index([clientId])
  @@index([industry])
  @@index([stage])
}

model DirectInvestmentDocument {
  id                   String                @id @default(cuid())
  directInvestmentId   String
  type                 DirectInvestmentDocumentType
  title                String
  uploadDate           DateTime              // This is the report date/period date
  dueDate              DateTime?
  url                  String
  parsedData           Json?
  
  // Executive Summary Fields - stored per document
  period               String?               // "Month" or "Quarter" for this document
  periodDate           DateTime?             // Which month/quarter this document represents
  highlights           String?               @db.Text
  lowlights            String?               @db.Text
  milestones           String?               @db.Text
  recentRounds         String?               @db.Text
  capTableChanges      String?               @db.Text
  
  // Metrics Snapshot - stored per document (historical tracking)
  revenue              Float?
  arr                  Float?                // Annual Recurring Revenue
  mrr                  Float?                // Monthly Recurring Revenue
  grossMargin          Float?
  runRate              Float?
  burn                 Float?                // Monthly burn rate
  runway               Float?                // Months of runway
  headcount            Int?
  cac                  Float?                // Customer Acquisition Cost
  ltv                  Float?                // Lifetime Value
  nrr                  Float?                // Net Revenue Retention
  cashBalance          Float?
  
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  directInvestment     DirectInvestment      @relation(fields: [directInvestmentId], references: [id], onDelete: Cascade)

  @@index([directInvestmentId])
  @@index([type])
  @@index([uploadDate])  // Index for historical queries
}

model CryptoHolding {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String
  amount    Float
  valueUsd  Float
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@index([userId])
}

model AuditLog {
  id          String        @id @default(cuid())
  userId      String
  action      AuditAction
  resource    AuditResource
  resourceId  String?
  description String
  oldValues   Json?
  newValues   Json?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime      @default(now())
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([createdAt])
  @@index([resource])
  @@index([userId, createdAt])
  @@index([userId])
}

model invitations {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String    @unique @db.VarChar(255)
  email      String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([token], map: "idx_invitations_token")
}

model users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique @db.VarChar(255)
  password_hash String    @db.VarChar(255)
  first_name    String?   @db.VarChar(100)
  last_name     String?   @db.VarChar(100)
  name          String?   @db.VarChar(200)
  role          String?   @default("USER") @db.VarChar(50)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([email], map: "idx_users_email")
}

enum Role {
  USER
  ADMIN
  DATA_MANAGER
}

enum DocumentType {
  CAPITAL_CALL
  QUARTERLY_REPORT
  ANNUAL_REPORT
  KYC
  COMPLIANCE
  OTHER
}

enum DirectInvestmentDocumentType {
  EXECUTIVE_SUMMARY
  FINANCIAL_STATEMENT
  INVESTOR_UPDATE
  BOARD_PACKAGE
  CAP_TABLE
  TERM_SHEET
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  LATE
  OVERDUE
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  UPLOAD
  DOWNLOAD
  EXPORT
  IMPORT
  RESET_PASSWORD
  CHANGE_PASSWORD
  GRANT_ACCESS
  REVOKE_ACCESS
}

enum AuditResource {
  USER
  FUND
  DOCUMENT
  DIRECT_INVESTMENT
  DIRECT_INVESTMENT_DOCUMENT
  CRYPTO_HOLDING
  FUND_ACCESS
  INVITATION
  SYSTEM
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
}

model MFAToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
}

model MFASettings {
  id          String    @id @default(cuid())
  userId      String    @unique
  enabled     Boolean   @default(false)
  secret      String?
  backupCodes String[]
  lastUsed    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String
  deviceInfo   Json?
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
}

model SecurityEvent {
  id          String   @id @default(cuid())
  userId      String?
  eventType   String
  description String
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  severity    String   @default("INFO")
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([severity])
}
